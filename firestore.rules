
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow update: if isSignedIn() && isOwner(userId) && (request.resource.data.email == resource.data.email);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    match /cars/{carId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.ownerId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.ownerId);
    }

    match /bookings/{bookingId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if isSignedIn() && (isExistingOwner(resource.data.customerId) || isExistingOwner(resource.data.ownerId));
      allow delete: if isSignedIn() && isExistingOwner(resource.data.customerId);
    }

    match /notifications/{notificationId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    match /reviews/{reviewId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.userId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.userId);
    }

    match /locations/{locationId} {
      allow get: if true;
      allow read: if true; 
      allow list: if true;
      allow write: if isSignedIn();
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}
