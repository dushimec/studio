/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description This ruleset enforces a user-ownership model for user profiles and allows public reads for car listings. Bookings, notifications, and reviews have more granular access control based on user roles and relationships.
 *
 * @data_structure
 * - /users/{userId}: Stores user profiles, with the document ID being the Firebase Auth UID.
 * - /cars/{carId}: Stores car listings, accessible for public reading but with owner-only writes.
 * - /bookings/{bookingId}: Stores booking information.
 * - /notifications/{notificationId}: Stores notifications for users.
 * - /reviews/{reviewId}: Stores reviews for car rentals.
 *
 * @key_security_decisions
 * - Users can only read and write their own profile data.
 * - Car listings are publicly readable but can only be created, updated, or deleted by the car's owner.
 * - Listing of users is disallowed.
 *
 * @denormalization_for_authorization
 * - Car documents have an `ownerId` field to simplify ownership checks for write operations.
 * - Booking documents include `customerId` and `ownerId` fields for simpler authorization.
 * - Notification documents include a `userId` to target the intended recipient.
 *
 * @structural_segregation
 * - No structural segregation is used in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) User with ID 'user123' can read/write their own profile.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access 'user123' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages car listings. Car data is publicly readable but only the owner can create, update, or delete.
     * @path /cars/{carId}
     * @allow (get, list) Any user can read car listings.
     * @allow (create, update, delete) User with ID 'owner123' can create, update, or delete their own car listing.
     * @deny (create, update, delete) User with ID 'otherUser' cannot modify 'owner123' car listing.
     * @principle Public read, owner-only writes.
     */
    match /cars/{carId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages bookings. Access control is based on the customer and car owner.
     * @path /bookings/{bookingId}
     * @allow (get) Any user can get a booking
     * @allow (create) Any signed in user can create a booking
     * @allow (update, delete) Only the car owner or the customer who created the booking can update or delete it.
     * @principle Access control based on customer and owner relationships.
     */
    match /bookings/{bookingId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.customerId == request.auth.uid;
      allow update: if isExistingOwner(request.resource.data.customerId) || isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(request.resource.data.customerId) || isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Manages notifications for users. Only the target user can access their notifications.
     * @path /notifications/{notificationId}
     * @allow (get, create, update, delete) User with ID 'user123' can read/write their own notifications.
     * @deny (get, create, update, delete) User with ID 'user456' cannot access 'user123' notifications.
     * @principle Enforces user-specific access for notifications.
     */
    match /notifications/{notificationId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }

    /**
     * @description Manages reviews for car rentals.
     * @path /reviews/{reviewId}
     * @allow (get, list) Any user can get/list review data.
     * @allow (create) Any signed in user can create a review. The `userId` field must match the authenticated user's UID.
     * @allow (update, delete) Only the user who created the review can update or delete it.
     * @principle Public read for reviews, owner-only writes.
     */
    match /reviews/{reviewId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId);
      allow delete: if isExistingOwner(resource.data.userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}